using System;
using System.Linq;
using System.Threading;

using LiveSplit.Components.Net.Sdk.SourceGenerators.Extensions;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace LiveSplit.Components.Net.Sdk.SourceGenerators;

[Generator(LanguageNames.CSharp)]
internal sealed partial class ComponentFactoryGenerator
    : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var metadatas = context.SyntaxProvider
            .ForAttributeWithMetadataName("LiveSplit.Components.Sdk.ComponentAttribute", Include, Transform)
            .Where(static metadata => metadata is not null)
            .Select(static (metadata, ct) => metadata!);

        context.RegisterSourceOutput(metadatas, Generate);
    }

    private static bool Include(SyntaxNode node, CancellationToken ct)
    {
        return node is ClassDeclarationSyntax;
    }

    private static ComponentMetadata? Transform(GeneratorAttributeSyntaxContext context, CancellationToken ct)
    {
        if (context.TargetSymbol is not INamedTypeSymbol { IsAbstract: false, IsStatic: false } symbol)
        {
            return null;
        }

        string? typeNamespace = !symbol.ContainingNamespace.IsGlobalNamespace
            ? symbol.ContainingNamespace.ToDisplayString()
            : null;

        string typeName = symbol.Name;
        string typeFullName = symbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

        if (context.Attributes is not [{ } attribute])
        {
            return null;
        }

        // Required properties.
        if (!attribute.TryGetNamedArgument("Name", out string? name)
            || !attribute.TryGetNamedArgument("Author", out string? author)
            || !attribute.TryGetNamedArgument("Version", out string? version)
            || !attribute.TryGetNamedArgument("Category", out int category))
        {
            return null;
        }

        if (!Version.TryParse(version, out Version? parsedVersion))
        {
            return null;
        }

        // Optional properties.
        if (!attribute.TryGetNamedArgument("Description", out string? description))
        {
            description = "";
        }

        if (!attribute.TryGetNamedArgument("RepositoryUrl", out string? repositoryUrl))
        {
            repositoryUrl = $"https://github.com/{author}/LiveSplit.{symbol.Name}";
        }

        if (!attribute.TryGetNamedArgument("UpdateUrl", out string? updateUrl))
        {
            updateUrl = $"{repositoryUrl}/releases/latest/download";
        }

        return new(
            typeNamespace,
            typeName,
            typeFullName,
            name,
            author,
            parsedVersion,
            category switch
            {
                1 => "Timer",
                2 => "List",
                3 => "Information",
                4 => "Media",
                5 => "Control",
                _ => "Other"
            },
            description,
            repositoryUrl.Replace(" ", "%20"),
            updateUrl.Replace(" ", "%20"));
    }

    private static void Generate(SourceProductionContext context, ComponentMetadata metadata)
    {
        string factoryName = $"{metadata.TypeName}Factory";
        string factoryFullName = $"{metadata.TypeFullName}Factory";

        string fileName = $"{factoryName}.g.cs";
        string source = $$"""
            // <auto-generated />
            #nullable enable

            [assembly: global::LiveSplit.UI.Components.ComponentFactoryAttribute(typeof({{factoryFullName}}))]

            namespace {{metadata.TypeNamespace}} {
                file sealed class {{factoryName}} : global::LiveSplit.UI.Components.IComponentFactory {
                    public string ComponentName => "{{metadata.ComponentName}}";
                    public string Description => "{{metadata.ComponentDescription}}";
                    public global::System.Version Version => new global::System.Version({{metadata.ComponentVersion.Major}}, {{metadata.ComponentVersion.Minor}}, {{metadata.ComponentVersion.Build}});

                    public global::LiveSplit.UI.Components.ComponentCategory Category => global::LiveSplit.UI.Components.ComponentCategory.{{metadata.ComponentCategory}};

                    public string UpdateName => "{{metadata.ComponentName}}";
                    public string XMLURL => "{{metadata.ComponentRepositoryUrl}}/changelog.xml";
                    public string UpdateURL => "{{metadata.ComponentUpdateUrl}}";

                    public global::LiveSplit.UI.Components.IComponent Create(global::LiveSplit.Model.LiveSplitState state) {
                        return new {{metadata.TypeFullName}}(state);
                    }
                }
            }
            """;

        context.AddSource(fileName, source);
    }

    private sealed record ComponentMetadata(
        string? TypeNamespace,
        string TypeName,
        string TypeFullName,
        string ComponentName,
        string ComponentAuthor,
        Version ComponentVersion,
        string ComponentCategory,
        string ComponentDescription,
        string ComponentRepositoryUrl,
        string ComponentUpdateUrl);
}
